{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Workspace\\\\Webcup\\\\sirius_webcup\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Configuration, OpenAIApi } from 'openai';\nimport FormSection from './openai/FormSection';\nimport AnswerSection from './openai/AnswerSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const configuration = new Configuration({\n    apiKey: process.env.REACT_APP_OPENAPI_KEY\n  });\n  const openai = new OpenAIApi(configuration);\n  const [storedValues, setStoredValues] = useState([]);\n  const generateResponse = async (newQuestion, setNewQuestion) => {\n    let options = {\n      model: 'text-davinci-003',\n      temperature: 0,\n      max_tokens: 100,\n      top_p: 1,\n      frequency_penalty: 0.0,\n      presence_penalty: 0.0,\n      stop: ['/']\n    };\n    let completeOptions = {\n      ...options,\n      prompt: newQuestion\n    };\n    const response = await openai.createCompletion(completeOptions);\n\n    // console.log(response.data.choices[0].text);\n    if (response.data.choices) {\n      setStoredValues([{\n        question: newQuestion,\n        answer: response.data.choices[0].text\n      }, ...storedValues]);\n      setNewQuestion('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ChatGPT CLONE \\uD83E\\uDD16\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"I am an automated question and answer system, designed to assist you in finding relevant information. You are welcome to ask me any queries you may have, and I will do my utmost to offer you a reliable response. Kindly keep in mind that I am a machine and operate solely based on programmed algorithms.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormSection, {\n      generateResponse: generateResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AnswerSection, {\n      storedValues: storedValues\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"Ot+oioh89jezi3f1OL6LdZ0683k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Configuration","OpenAIApi","FormSection","AnswerSection","jsxDEV","_jsxDEV","App","_s","configuration","apiKey","process","env","REACT_APP_OPENAPI_KEY","openai","storedValues","setStoredValues","useState","generateResponse","newQuestion","setNewQuestion","options","model","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","stop","completeOptions","prompt","response","createCompletion","data","choices","question","answer","text","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Workspace/Webcup/sirius_webcup/src/App.js"],"sourcesContent":["import { Configuration, OpenAIApi } from 'openai';\n\nimport FormSection from './openai/FormSection';\nimport AnswerSection from './openai/AnswerSection';\n\nconst App = () => {\n\n  const configuration = new Configuration({\n    apiKey: process.env.REACT_APP_OPENAPI_KEY,\n  })\n\n  const openai = new OpenAIApi(configuration)\n\n  const [storedValues, setStoredValues] = useState([]);\n\n  const generateResponse = async (newQuestion, setNewQuestion) => {\n        let options = {\n            model: 'text-davinci-003',\n            temperature: 0,\n            max_tokens: 100,\n            top_p: 1,\n            frequency_penalty: 0.0,\n            presence_penalty: 0.0,\n            stop: ['/'],\n        };\n\n        let completeOptions = {\n            ...options,\n            prompt: newQuestion,\n        };\n\n        const response = await openai.createCompletion(completeOptions);\n\n        // console.log(response.data.choices[0].text);\n        if (response.data.choices) {\n            setStoredValues([\n                {\n                    question: newQuestion,\n                    answer: response.data.choices[0].text,\n                },\n                ...storedValues,\n            ]);\n            setNewQuestion('');\n        }\n  };\n\n\n    return (\n        <div>\n            <div className=\"header-section\">\n                <h1>ChatGPT CLONE ðŸ¤–</h1>\n                <p>\n                    I am an automated question and answer system, designed to assist you\n                    in finding relevant information. You are welcome to ask me any queries\n                    you may have, and I will do my utmost to offer you a reliable\n                    response. Kindly keep in mind that I am a machine and operate solely\n                    based on programmed algorithms.\n                </p>\n            </div>\n\n            <FormSection generateResponse={generateResponse} />\n            <AnswerSection storedValues={storedValues} />\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AAEjD,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB,MAAMC,aAAa,GAAG,IAAIR,aAAa,CAAC;IACtCS,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;EACtB,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAG,IAAIZ,SAAS,CAACO,aAAa,CAAC;EAE3C,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,WAAW,EAAEC,cAAc,KAAK;IAC1D,IAAIC,OAAO,GAAG;MACVC,KAAK,EAAE,kBAAkB;MACzBC,WAAW,EAAE,CAAC;MACdC,UAAU,EAAE,GAAG;MACfC,KAAK,EAAE,CAAC;MACRC,iBAAiB,EAAE,GAAG;MACtBC,gBAAgB,EAAE,GAAG;MACrBC,IAAI,EAAE,CAAC,GAAG;IACd,CAAC;IAED,IAAIC,eAAe,GAAG;MAClB,GAAGR,OAAO;MACVS,MAAM,EAAEX;IACZ,CAAC;IAED,MAAMY,QAAQ,GAAG,MAAMjB,MAAM,CAACkB,gBAAgB,CAACH,eAAe,CAAC;;IAE/D;IACA,IAAIE,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MACvBlB,eAAe,CAAC,CACZ;QACImB,QAAQ,EAAEhB,WAAW;QACrBiB,MAAM,EAAEL,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACG;MACrC,CAAC,EACD,GAAGtB,YAAY,CAClB,CAAC;MACFK,cAAc,CAAC,EAAE,CAAC;IACtB;EACN,CAAC;EAGC,oBACId,OAAA;IAAAgC,QAAA,gBACIhC,OAAA;MAAKiC,SAAS,EAAC,gBAAgB;MAAAD,QAAA,gBAC3BhC,OAAA;QAAAgC,QAAA,EAAI;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBrC,OAAA;QAAAgC,QAAA,EAAG;MAMH;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENrC,OAAA,CAACH,WAAW;MAACe,gBAAgB,EAAEA;IAAiB;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnDrC,OAAA,CAACF,aAAa;MAACW,YAAY,EAAEA;IAAa;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEd,CAAC;AAACnC,EAAA,CA3DID,GAAG;AAAAqC,EAAA,GAAHrC,GAAG;AA6DT,eAAeA,GAAG;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}