{"version":3,"file":"static/js/205.e48a6fc2.chunk.js","mappings":"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","sources":["pages/chatPage/Speech.js","pages/chatPage/Form.js","pages/chatPage/Answer.js","pages/chatPage/ChatPage.js"],"sourcesContent":["import React from 'react';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nconst SpeechToText = () => {\r\n  const {\r\n    transcript,\r\n    listening,\r\n    // resetTranscript,\r\n    browserSupportsSpeechRecognition\r\n  } = useSpeechRecognition();\r\n\r\n  if (!browserSupportsSpeechRecognition) {\r\n    return <span>Browser doesn't support speech recognition.</span>;\r\n  } else {\r\n    SpeechRecognition.startListening({ continuous: true })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>Microphone: {listening ? 'on' : 'off'}</p>\r\n      <button onClick={SpeechRecognition.startListening}>Start</button>\r\n      <button onClick={SpeechRecognition.stopListening}>Stop</button>\r\n      {/* <button onClick={resetTranscript}>Reset</button> */}\r\n      <p>{transcript}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default SpeechToText;","import { useState } from \"react\";\r\nimport SpeechToText from './Speech';\r\n\r\nconst FormSection = ({ generateResponse }) => {\r\n\r\n    const [newQuestion, setNewQuestion] = useState('');\r\n\r\n    return (\r\n        <div className=\"form-section\">\r\n            <textarea\r\n                rows=\"5\"\r\n                className=\"form-control\"\r\n                placeholder=\"Ask me anything...\"\r\n                value={newQuestion}\r\n                onChange={(e) => setNewQuestion(e.target.value)}\r\n            ></textarea>\r\n            <SpeechToText/>\r\n            <button \r\n                className=\"btn\"\r\n                onClick={() => generateResponse(newQuestion, setNewQuestion)}>\r\n                Generate Response ðŸ¤–\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormSection;","const AnswerSection = ({storedValues}) => {\r\n\r\n    const copyText = (text) => {\r\n        navigator.clipboard.writeText(text);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <hr className=\"hr-line\" />\r\n            <div className=\"answer-container\">\r\n                {storedValues.map((value, index) => {\r\n                    return (\r\n                        <div className=\"answer-section\" key={index}>\r\n                            <p className=\"question\">{value.question}</p>\r\n                            <p className=\"answer\">{value.answer}</p>\r\n                            <div \r\n                                className=\"copy-icon\"\r\n                                onClick={() => copyText(value.answer)}>\r\n                                <i className=\"fa-solid fa-copy\"></i>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AnswerSection;","import { useState } from 'react';\r\nimport { Configuration, OpenAIApi } from 'openai';\r\n\r\nimport FormSection from './Form';\r\nimport AnswerSection from './Answer';\r\n\r\nconst ChatPage = () => {\r\n\r\n  const key = \"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\"\r\n\r\n  const configuration = new Configuration({\r\n    apiKey: key\r\n  })\r\n\r\n  const openai = new OpenAIApi(configuration)\r\n\r\n  const [storedValues, setStoredValues] = useState([]);\r\n\r\n  const generateResponse = async (newQuestion, setNewQuestion) => {\r\n        let options = {\r\n            model: 'text-davinci-003',\r\n            temperature: 0,\r\n            max_tokens: 100,\r\n            top_p: 1,\r\n            frequency_penalty: 0.0,\r\n            presence_penalty: 0.0,\r\n            stop: ['/'],\r\n        };\r\n\r\n        let completeOptions = {\r\n            ...options,\r\n            prompt: newQuestion,\r\n        };\r\n\r\n        const response = await openai.createCompletion(completeOptions);\r\n\r\n        // console.log(response.data.choices[0].text);\r\n        if (response.data.choices) {\r\n            setStoredValues([\r\n                {\r\n                    question: newQuestion,\r\n                    answer: response.data.choices[0].text,\r\n                },\r\n                ...storedValues,\r\n            ]);\r\n            setNewQuestion('');\r\n        }\r\n  };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"header-section\">\r\n                <h1>ChatGPT CLONE ðŸ¤–</h1>\r\n                <p>\r\n                    I am an automated question and answer system, designed to assist you\r\n                    in finding relevant information. You are welcome to ask me any queries\r\n                    you may have, and I will do my utmost to offer you a reliable\r\n                    response. Kindly keep in mind that I am a machine and operate solely\r\n                    based on programmed algorithms.\r\n                </p>\r\n            </div>\r\n\r\n            <FormSection generateResponse={generateResponse} />\r\n            <AnswerSection storedValues={storedValues} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"names":["_useSpeechRecognition","useSpeechRecognition","transcript","listening","browserSupportsSpeechRecognition","SpeechRecognition","continuous","_jsxs","children","_jsx","onClick","_ref","generateResponse","_useState","useState","_useState2","_slicedToArray","newQuestion","setNewQuestion","className","rows","placeholder","value","onChange","e","target","SpeechToText","storedValues","_Fragment","map","index","question","answer","text","navigator","clipboard","writeText","configuration","Configuration","apiKey","openai","OpenAIApi","setStoredValues","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","completeOptions","response","wrap","_context","prev","next","model","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","stop","_objectSpread","prompt","createCompletion","sent","data","choices","concat","_toConsumableArray","_x","_x2","apply","arguments","FormSection","AnswerSection"],"sourceRoot":""}